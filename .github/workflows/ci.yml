name: Tests

on: push

env:
  GO111MODULE: on
  GOPROXY: "https://proxy.golang.org"
  CGO_ENABLED: 1

jobs:
  build:
    name: Test on ${{ matrix.os }} @Go${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: ["1.22.x", "1.24.x"]
        os: [ubuntu-latest]
    container:
      image: tdengine/tdengine:3.3.5.0
      options: --user root

    steps:
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Print Go environment
        id: vars
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\nSystem environment:\n\n"
          env
          # Calculate the short SHA1 hash of the git commit
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "go_cache=$(go env GOCACHE)" >> $GITHUB_OUTPUT

      - name: Cache go modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.vars.outputs.GO_CACHE }}
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.go-version }}-go-ci-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.go-version }}-go-ci-

      - name: Install build-essential
        run: apt update && apt install -y build-essential curl

      - name: Copy taos cfg
        run: |
          cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: start taosd
        run: nohup taosd &

      - name: Test
        run: go test -v -race -coverprofile=coverage -covermode=atomic ./...

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
